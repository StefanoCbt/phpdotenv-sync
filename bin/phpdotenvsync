#!/usr/bin/env php
<?php

/**
 * loading composer
 */
$composerAutoloaderPaths = [
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php',
];
$composerPath = false;

foreach ($composerAutoloaderPaths as $composerAutoloaderPath) {
    if (!file_exists($composerAutoloaderPath)) {
        continue;
    }

    $composerPath = $composerAutoloaderPath;
    break;
}

if (empty($composerPath)) {
    die('Fatal Error: Unable to load composer autoloader.');
}

require_once $composerPath;

/**
 * Start
 */
use Stefanocbt\PhpdotenvSync\Services\CliColoredMessagesService;
use Stefanocbt\PhpdotenvSync\OperationsStaticReference;
use Stefanocbt\PhpdotenvSync\Services\DotenvService;
use Stefanocbt\PhpdotenvSync\Services\OutputStringsService;
use Stefanocbt\PhpdotenvSync\Services\CommandExecutorService;

/**
 * Setting command arguments/options
 */
$shortOpts = ''; // unused but required to be set to avoid: PHP Deprecated: getopt(): Passing null to parameter #1 ($short_options) of type string is deprecated in bin/phpdotenvsync

$longOpts = [
    'opt:', // required (the requested operation) (list operations: OperationsStaticReference.php)
    'src::', // optional (the dotenv file source)
    'dest::', // optional (the dotenv file destination)
    'no-interaction::', // optional (avoid all kind of user interactions)
];

$options = getopt($shortOpts, $longOpts);

/**
 * validating options
 */
if (empty($options)) {
    CliColoredMessagesService::danger('invalid options provided.');
    exit;
}
if (empty($options['opt']) || !in_array($options['opt'], OperationsStaticReference::OPT_DOTENV_REFERENCES)) {
    CliColoredMessagesService::danger('the requested opt does not exists or it is invalid.');
    exit;
}

/**
 * setting src & dest parameters
 */
$src = getcwd() . '/.env.example';
$dest = getcwd() . '/.env';

if (!empty($options['src'])) {
    $src = $options['src'];
}
if (!empty($options['dest'])) {
    $dest = $options['dest'];
}

/**
 * checking for --no-interaction option
 */
$noInteraction = false;
if (isset($options['no-interaction'])) {
    $noInteraction = true;
}

/**
 * Running the requested opt
 */
$dotenvService = new DotenvService();

switch ($options['opt']) {
    case (OperationsStaticReference::OPT_DOTENV_CHECK_DIFF):
        /**
         * showing init infos
         */
        CliColoredMessagesService::success('Checking DIFF...');
        CliColoredMessagesService::info('src: ' . $src);
        CliColoredMessagesService::info('dest: ' . $dest);
        echo PHP_EOL;

        $diff = $dotenvService->getDotenvFilesDiff($src, $dest);

        if (empty($diff)) {
            CliColoredMessagesService::success('src and dest Dotenvs params are synced.');
            break;
        }

        /**
         * in this case the src Dotenv has more params than dest Dotenv
         */
        foreach ($diff as $missingParamName => $missingParamValue) {
            CliColoredMessagesService::warning('Missing param on dest Dotenv:');
            CliColoredMessagesService::info(OutputStringsService::getMissingDotenvParamString($missingParamName, $missingParamValue));

            echo PHP_EOL;
        }

        break;
    case (OperationsStaticReference::OPT_DOTENV_SYNC):
        /**
         * showing init infos
         */
        CliColoredMessagesService::success('Executing SYNC...');
        CliColoredMessagesService::info('src: ' . $src);
        CliColoredMessagesService::info('dest: ' . $dest);
        echo PHP_EOL;

        $diff = $dotenvService->getDotenvFilesDiff($src, $dest);

        if (empty($diff)) {
            CliColoredMessagesService::success('src and dest Dotenvs params are synced.');
            break;
        }

        /**
         * in this case the src Dotenv has more params than dest Dotenv
         */
        foreach ($diff as $missingParamName => $missingParamValue) {
            /**
             * asking action
             */
            $action = CommandExecutorService::ASK_DOTENV_PARAM_ACTION_COPY_DEFAULT_VALUE;
            if (!$noInteraction) {
                $action = CommandExecutorService::askForDotenvParam($missingParamName, $missingParamValue);
            }

            if (!$action || $action == CommandExecutorService::ASK_DOTENV_PARAM_ACTION_SKIP) {
                continue;
            }

            /**
             * handling action
             */
            switch ($action) {
                case (CommandExecutorService::ASK_DOTENV_PARAM_ACTION_COPY_DEFAULT_VALUE):
                    $dotenvService->addDotenvParam(
                        $missingParamName,
                        $missingParamValue,
                        $dest
                    );
                    CliColoredMessagesService::success('Added (' . $missingParamName . ').');
                    break;
                case (CommandExecutorService::ASK_DOTENV_PARAM_ACTION_CHANGE_DEFAULT_VALUE):
                    $newValue = CommandExecutorService::askForNewDotenvValue();
                    $dotenvService->addDotenvParam(
                        $missingParamName,
                        $newValue,
                        $dest
                    );
                    CliColoredMessagesService::success('Added with specified value (' . $missingParamName . ').');
                    break;
            }

            echo PHP_EOL;
        }

        CliColoredMessagesService::success('Sync completed.');
        break;
    default:
        CliColoredMessagesService::danger('the requested opt does not exists. (fail)');
        exit;
}
